name: Contact Form Handler

on:
  repository_dispatch:
    types: [contact-form-submission]

jobs:
  process-contact:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    outputs:
      issue-number: ${{ steps.create-issue.outputs.issue-number }}
      issue-url: ${{ steps.create-issue.outputs.issue-url }}

    steps:
      - name: Log Submission
        run: |
          echo "=== お問い合わせ処理開始 ==="
          echo "投稿者: ${{ github.event.client_payload.name }}"
          echo "カテゴリー: ${{ github.event.client_payload.category }}"
          echo "タイトル: ${{ github.event.client_payload.title }}"
          echo "投稿ID: ${{ github.event.client_payload.metadata.submissionId }}"
          echo "IP: ${{ github.event.client_payload.metadata.ip }}"
          echo "タイムスタンプ: ${{ github.event.client_payload.metadata.timestamp }}"

      - name: Validate Submission
        id: validate
        run: |
          # 基本的な検証
          NAME="${{ github.event.client_payload.name }}"
          CATEGORY="${{ github.event.client_payload.category }}"
          TITLE="${{ github.event.client_payload.title }}"
          MESSAGE="${{ github.event.client_payload.message }}"

          echo "=== バリデーション開始 ==="

          # 必須フィールドチェック
          if [ -z "$NAME" ] || [ -z "$CATEGORY" ] || [ -z "$TITLE" ] || [ -z "$MESSAGE" ]; then
            echo "error=必須フィールドが不足しています" >> $GITHUB_OUTPUT
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          # 長さチェック
          if [ ${#TITLE} -gt 200 ]; then
            echo "error=タイトルが長すぎます" >> $GITHUB_OUTPUT
            echo "validation_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          # IPアドレスチェック（簡易）
          IP="${{ github.event.client_payload.metadata.ip }}"
          if [[ "$IP" =~ ^(127\.|10\.|172\.|192\.168\.) ]]; then
            echo "warning=ローカルIPアドレスが検出されました: $IP"
          fi

          echo "validation_passed=true" >> $GITHUB_OUTPUT
          echo "=== バリデーション完了 ==="

      - name: Determine Issue Labels
        id: labels
        run: |
          CATEGORY="${{ github.event.client_payload.category }}"
          EMAIL="${{ github.event.client_payload.email }}"

          # カテゴリー別ラベル
          case "$CATEGORY" in
            "bug")
              LABELS="private-submission,bug,needs-investigation"
              PRIORITY="high"
              ;;
            "feature")
              LABELS="private-submission,enhancement,user-request"
              PRIORITY="medium"
              ;;
            "question")
              LABELS="private-submission,question,documentation"
              PRIORITY="low"
              ;;
            "security")
              LABELS="private-submission,security,urgent"
              PRIORITY="critical"
              ;;
            *)
              LABELS="private-submission,general"
              PRIORITY="medium"
              ;;
          esac

          # 連絡先有無でラベル追加
          if [ -n "$EMAIL" ]; then
            LABELS="$LABELS,has-contact"
          else
            LABELS="$LABELS,no-contact"
          fi

          echo "labels=$LABELS" >> $GITHUB_OUTPUT
          echo "priority=$PRIORITY" >> $GITHUB_OUTPUT
          echo "=== ラベル決定: $LABELS ==="

      - name: Create Issue
        id: create-issue
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload.client_payload;
            const metadata = payload.metadata;

            // 安全にデータを処理
            const sanitize = (text) => {
              if (!text) return 'なし';
              return String(text).replace(/[<>&"']/g, (char) => {
                const entities = { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;', "'": '&#x27;' };
                return entities[char] || char;
              });
            };

            // Issue本文の構築
            const issueBody = [
              '## 📝 お問い合わせ詳細',
              '',
              '### 報告者情報',
              `- **名前**: ${sanitize(payload.name)}`,
              `- **連絡先**: ${sanitize(payload.email) || 'なし'}`,
              `- **カテゴリー**: ${sanitize(payload.category)}`,
              '',
              '### 内容',
              `**件名**: ${sanitize(payload.title)}`,
              '',
              '**詳細**:',
              sanitize(payload.message),
              '',
              '### 環境情報',
              `- **ブラウザ**: ${sanitize(payload.browser) || 'なし'}`,
              `- **User-Agent**: ${sanitize(metadata.userAgent) || 'なし'}`,
              `- **Referer**: ${sanitize(metadata.referer) || 'なし'}`,
              '',
              '### システム情報',
              `- **投稿ID**: \`${sanitize(metadata.submissionId)}\``,
              `- **投稿日時**: ${sanitize(metadata.timestamp)}`,
              `- **送信元IP**: \`${sanitize(metadata.ip)}\``,
              `- **処理ワークフロー**: \`${context.workflow}\` (Run ID: ${context.runId})`,
              '',
              '---',
              '> 🤖 このIssueはプライベートお問い合わせフォームから自動生成されました。',
              '> ',
              '> **対応ガイドライン**:',
              '> - 優先度: **${{ steps.labels.outputs.priority }}**',
              '> - 目標応答時間: 24時間以内',
              '> - 自動応答が有効です'
            ].join('\n');

            // Issue作成
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[${payload.category.toUpperCase()}] ${payload.title}`,
              body: issueBody,
              labels: '${{ steps.labels.outputs.labels }}'.split(',').map(l => l.trim())
            });

            console.log(`✅ Issue #${issue.data.number} を作成しました`);
            console.log(`URL: ${issue.data.html_url}`);

            // 出力設定
            core.setOutput('issue-number', issue.data.number);
            core.setOutput('issue-url', issue.data.html_url);
            core.setOutput('issue-id', issue.data.id);

            return {
              issueNumber: issue.data.number,
              issueUrl: issue.data.html_url,
              issueId: issue.data.id
            };

      - name: Add Priority Label
        if: steps.labels.outputs.priority == 'critical'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-issue.outputs.issue-number }},
              labels: ['priority-critical', 'security']
            });

      - name: Set Issue Priority
        uses: actions/github-script@v7
        with:
          script: |
            const priority = '${{ steps.labels.outputs.priority }}';
            const issueNumber = ${{ steps.create-issue.outputs.issue-number }};

            // 優先度に応じたマイルストーンやプロジェクト設定
            if (priority === 'critical') {
              // 重要度が高い場合はアサイン等の処理を追加可能
              console.log(`🚨 Critical issue #${issueNumber} created`);
            }

      - name: Trigger Auto Response
        run: |
          echo "=== 自動応答トリガー準備 ==="
          echo "Issue #${{ steps.create-issue.outputs.issue-number }} が作成されました"
          echo "既存のclaude-auto-response.ymlが自動的にトリガーされます"
          echo "処理完了時刻: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: Log Success
        run: |
          echo "=== 処理完了サマリー ==="
          echo "✅ 投稿者: ${{ github.event.client_payload.name }}"
          echo "✅ カテゴリー: ${{ github.event.client_payload.category }}"
          echo "✅ 作成されたIssue: #${{ steps.create-issue.outputs.issue-number }}"
          echo "✅ ラベル: ${{ steps.labels.outputs.labels }}"
          echo "✅ 優先度: ${{ steps.labels.outputs.priority }}"
          echo "✅ 処理時間: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

  # エラーハンドリング用ジョブ
  handle-error:
    runs-on: ubuntu-latest
    if: failure()
    needs: process-contact
    steps:
      - name: Log Error
        run: |
          echo "❌ お問い合わせ処理でエラーが発生しました"
          echo "投稿ID: ${{ github.event.client_payload.metadata.submissionId }}"
          echo "投稿者: ${{ github.event.client_payload.name }}"
          echo "エラー時刻: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"

      - name: Create Error Issue
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload.client_payload;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[ERROR] お問い合わせ処理エラー - ${payload.metadata.submissionId}`,
              body: [
                '## 🚨 お問い合わせ処理エラー',
                '',
                `**投稿ID**: \`${payload.metadata.submissionId}\``,
                `**投稿者**: ${payload.name}`,
                `**エラー発生時刻**: ${new Date().toISOString()}`,
                '',
                '**原因**: お問い合わせの自動処理中にエラーが発生しました。',
                '',
                '**対応が必要な項目**:',
                '- [ ] エラー原因の調査',
                `- [ ] 投稿者への連絡（連絡先: ${payload.email || 'なし'}）`,
                '- [ ] システムの修正',
                '',
                'このIssueは自動生成されました。手動での対応が必要です。'
              ].join('\n'),
              labels: ['private-submission', 'error', 'manual-review', 'priority-high']
            });

  # セキュリティ監査ジョブ
  security-audit:
    runs-on: ubuntu-latest
    if: github.event.client_payload.category == 'security'
    needs: process-contact
    steps:
      - name: Security Alert
        run: |
          echo "🔒 セキュリティ関連のお問い合わせが投稿されました"
          echo "Issue: #${{ needs.process-contact.outputs.issue-number }}"

      - name: Notify Security Team
        uses: actions/github-script@v7
        with:
          script: |
            // セキュリティチームへの通知
            const issueNumber = ${{ needs.process-contact.outputs.issue-number }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: [
                '🔒 **セキュリティチーム通知**',
                '',
                'このIssueはセキュリティ関連のお問い合わせとして分類されました。',
                '優先的な対応が必要です。',
                '',
                '**対応手順**:',
                '1. 内容の緊急度評価',
                '2. 必要に応じて非公開での対応',
                '3. 修正対応の実施',
                '4. 投稿者への報告',
                '',
                '@maintainers セキュリティ関連のお問い合わせです。'
              ].join('\n')
            });
