# .github/workflows/claude-auto-response.yml
name: Claude Code Auto Response

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  claude-auto-response:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse Issue Information
        id: parse-issue
        run: |
          echo "=== Issue情報解析 ==="

          # Issue情報を環境変数から取得
          if [ "${{ github.event_name }}" = "issues" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
            ISSUE_LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
          elif [ "${{ github.event_name }}" = "issue_comment" ]; then
            ISSUE_NUMBER="${{ github.event.issue.number }}"
            ISSUE_TITLE="${{ github.event.issue.title }}"
            ISSUE_BODY="${{ github.event.issue.body }}"
            ISSUE_AUTHOR="${{ github.event.issue.user.login }}"
            ISSUE_LABELS="${{ join(github.event.issue.labels.*.name, ',') }}"
            COMMENT_BODY="${{ github.event.comment.body }}"
            COMMENT_AUTHOR="${{ github.event.comment.user.login }}"
          fi

          # 出力変数に設定
          echo "issue_number=${ISSUE_NUMBER}" >> $GITHUB_OUTPUT
          echo "issue_title=${ISSUE_TITLE}" >> $GITHUB_OUTPUT
          echo "issue_author=${ISSUE_AUTHOR}" >> $GITHUB_OUTPUT
          echo "issue_labels=${ISSUE_LABELS}" >> $GITHUB_OUTPUT

          # Issue本文を一時ファイルに保存（特殊文字対応）
          echo "${ISSUE_BODY}" > issue_body.txt

          # コメントがある場合は保存
          if [ -n "${COMMENT_BODY:-}" ]; then
            echo "${COMMENT_BODY}" > comment_body.txt
            echo "has_comment=true" >> $GITHUB_OUTPUT
            echo "comment_author=${COMMENT_AUTHOR}" >> $GITHUB_OUTPUT
          else
            echo "has_comment=false" >> $GITHUB_OUTPUT
          fi

          echo "Issue #${ISSUE_NUMBER} の情報を解析完了"

      - name: Categorize Issue
        id: categorize
        run: |
          echo "=== Issue分類 ==="

          TITLE="${{ steps.parse-issue.outputs.issue_title }}"
          LABELS="${{ steps.parse-issue.outputs.issue_labels }}"
          BODY=$(cat issue_body.txt)

          # 分類ロジック
          CATEGORY="general"
          PRIORITY="medium"

          # ラベルベースの分類
          if echo "${LABELS}" | grep -q "bug"; then
            CATEGORY="bug"
            PRIORITY="high"
          elif echo "${LABELS}" | grep -q "enhancement"; then
            CATEGORY="feature"
            PRIORITY="medium"
          elif echo "${LABELS}" | grep -q "question"; then
            CATEGORY="question"
            PRIORITY="low"
          elif echo "${LABELS}" | grep -q "authentication"; then
            CATEGORY="auth"
            PRIORITY="high"
          elif echo "${LABELS}" | grep -q "performance"; then
            CATEGORY="performance"
            PRIORITY="high"
          fi

          # タイトル・本文ベースの分類（ラベルがない場合）
          TEXT_ALL="${TITLE} ${BODY}"

          if echo "${TEXT_ALL}" | grep -qi "バグ\|bug\|エラー\|error\|動かない\|問題\|不具合\|失敗\|できない"; then
            if [ "$CATEGORY" = "general" ]; then
              CATEGORY="bug"
              PRIORITY="high"
            fi
          elif echo "${TEXT_ALL}" | grep -qi "機能\|feature\|追加\|改善\|enhancement\|要望\|ほしい\|できるように"; then
            if [ "$CATEGORY" = "general" ]; then
              CATEGORY="feature"
              PRIORITY="medium"
            fi
          elif echo "${TEXT_ALL}" | grep -qi "質問\|question\|使い方\|how\|教えて\|help\|わからない\|方法"; then
            if [ "$CATEGORY" = "general" ]; then
              CATEGORY="question"
              PRIORITY="low"
            fi
          elif echo "${TEXT_ALL}" | grep -qi "ログイン\|login\|認証\|auth\|google\|firebase\|サインイン"; then
            if [ "$CATEGORY" = "general" ]; then
              CATEGORY="auth"
              PRIORITY="high"
            fi
          elif echo "${TEXT_ALL}" | grep -qi "遅い\|重い\|performance\|パフォーマンス\|速度\|レスポンス"; then
            if [ "$CATEGORY" = "general" ]; then
              CATEGORY="performance"
              PRIORITY="high"
            fi
          fi

          # 緊急度判定
          if echo "${TEXT_ALL}" | grep -qi "緊急\|urgent\|emergency\|データ\|消え\|削除\|壊れ\|使えない"; then
            PRIORITY="critical"
          fi

          echo "category=${CATEGORY}" >> $GITHUB_OUTPUT
          echo "priority=${PRIORITY}" >> $GITHUB_OUTPUT

          echo "分類: ${CATEGORY}, 優先度: ${PRIORITY}"

      - name: Create Claude Analysis Prompt
        id: create-prompt
        run: |
          echo "=== Claude分析プロンプト作成 ==="

          CATEGORY="${{ steps.categorize.outputs.category }}"
          PRIORITY="${{ steps.categorize.outputs.priority }}"
          ISSUE_NUMBER="${{ steps.parse-issue.outputs.issue_number }}"
          ISSUE_TITLE="${{ steps.parse-issue.outputs.issue_title }}"
          ISSUE_AUTHOR="${{ steps.parse-issue.outputs.issue_author }}"

          # プロンプトを環境変数として設定
          CLAUDE_PROMPT="# 口腔機能低下症診断・管理アプリ - 技術サポート分析

          ## 担当AI
          あなたは口腔機能低下症診断・管理アプリの上級技術サポートAIです。

          ## 問い合わせ情報
          - **Issue番号**: #${ISSUE_NUMBER}
          - **カテゴリ**: ${CATEGORY}
          - **優先度**: ${PRIORITY}
          - **報告者**: ${ISSUE_AUTHOR}
          - **タイトル**: ${ISSUE_TITLE}

          ### 詳細内容
          $(cat issue_body.txt)"

          if [ "${{ steps.parse-issue.outputs.has_comment }}" = "true" ]; then
            CLAUDE_PROMPT="${CLAUDE_PROMPT}

          ### 追加コメント
          - **コメント者**: ${{ steps.parse-issue.outputs.comment_author }}
          $(cat comment_body.txt)"
          fi

          CLAUDE_PROMPT="${CLAUDE_PROMPT}

          ## アプリ技術情報
          - **フロントエンド**: HTML5, CSS3, JavaScript (ES6+)
          - **データベース**: Firebase Firestore + ローカルストレージ
          - **認証**: Google OAuth 2.0 (Firebase Authentication)
          - **UI**: レスポンシブデザイン
          - **対応ブラウザ**: Chrome, Firefox, Safari, Edge (最新版)

          ## 主要機能とファイル構成
          - **患者管理**: patients.js
          - **検査機能**: assessment.js
          - **管理計画**: management.js
          - **データベース**: database.js (Firebase版)
          - **認証**: firebase-config.js
          - **メイン**: app.js, index.html
          - **スタイル**: styles.css

          ## 指示
          以下の形式で包括的な技術サポート応答を生成してください：

          1. **問題分析**: 技術的な原因と影響範囲
          2. **即座の対応手順**: 3つの具体的なステップ
          3. **技術的解決策**: 詳細な解決方法
          4. **テスト手順**: 検証方法
          5. **再発防止策**: 今後の予防策

          医療従事者向けアプリのため、データの安全性とプライバシー保護を最優先に考慮してください。"

          # プロンプトを一時ファイルに保存
          echo "${CLAUDE_PROMPT}" > claude_prompt.txt

          echo "Claude分析プロンプト作成完了"

      - name: Run Claude Code Analysis
        uses: anthropics/claude-code-action@beta
        id: claude-analysis
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          direct_prompt: ${{ steps.create-prompt.outputs.claude_prompt }}
          trigger_phrase: "auto-analysis"
          custom_instructions: "Issue #${{ steps.parse-issue.outputs.issue_number }}の技術サポート分析を実行してください。"

      - name: Create Fallback Response
        id: fallback-response
        if: failure() || steps.claude-analysis.outputs.response == ''
        run: |
          echo "=== フォールバック応答作成 ==="

          CATEGORY="${{ steps.categorize.outputs.category }}"
          PRIORITY="${{ steps.categorize.outputs.priority }}"
          ISSUE_AUTHOR="${{ steps.parse-issue.outputs.issue_author }}"

          # カテゴリ別の絵文字とタイトル
          case $CATEGORY in
            "bug")
              EMOJI="🐛"
              TITLE="バグレポート受付"
              ;;
            "feature")
              EMOJI="✨"
              TITLE="機能要望受付"
              ;;
            "question")
              EMOJI="❓"
              TITLE="質問受付"
              ;;
            "auth")
              EMOJI="🔐"
              TITLE="認証問題受付"
              ;;
            "performance")
              EMOJI="⚡"
              TITLE="パフォーマンス問題受付"
              ;;
            *)
              EMOJI="🤖"
              TITLE="お問い合わせ受付"
              ;;
          esac

          # 優先度バッジ
          case $PRIORITY in
            "critical")
              PRIORITY_BADGE="🔴 緊急"
              ;;
            "high")
              PRIORITY_BADGE="🟠 高"
              ;;
            "medium")
              PRIORITY_BADGE="🟡 中"
              ;;
            "low")
              PRIORITY_BADGE="🟢 低"
              ;;
          esac

          # フォールバック応答を作成
          cat > fallback_response.md << 'EOF'
          ## ${EMOJI} ${TITLE}

          @${ISSUE_AUTHOR} さん、お問い合わせありがとうございます！

          **優先度**: ${PRIORITY_BADGE} | **予想対応時間**: 24時間以内

          ---

          ### 🔍 自動分析結果

          お問い合わせ内容を確認いたしました。詳細な技術分析を開始しており、24時間以内に具体的な解決策をお返しいたします。

          ### 🚀 即座の対応手順

          問題の詳細を確認するため、以下をお試しください：

          1. **ブラウザの再読み込み**: Ctrl+F5（Windows）またはCmd+Shift+R（Mac）で強制更新
          2. **開発者ツールでエラー確認**: F12キーを押してConsoleタブでエラーメッセージを確認
          3. **別ブラウザでの検証**: Chrome、Firefox、Safariなど別のブラウザで同様の問題が発生するか確認

          ### 🛠️ 技術サポートチームからの対応

          - 開発チームが手動で詳細分析を実施します
          - 必要に応じて追加情報をお聞きする場合があります
          - 解決策が判明次第、コメントで回答いたします

          ### 📞 緊急時の対応

          - データ損失の可能性がある場合は、即座に使用を停止してください
          - 緊急性が高い場合は、Issueタイトルに `[緊急]` を追記してください

          ---

          ### 📚 関連リソース

          - [よくある質問](https://github.com/${{ github.repository }}/issues?q=label%3Aquestion)
          - [過去の解決済み問題](https://github.com/${{ github.repository }}/issues?q=is%3Aissue+is%3Aclosed)

          ---

          <sub>この応答は自動生成されています。技術サポートチームが詳細分析を行い、24時間以内に追加回答いたします。</sub>
          EOF

          # 変数を展開
          sed -i "s/\${EMOJI}/$EMOJI/g" fallback_response.md
          sed -i "s/\${TITLE}/$TITLE/g" fallback_response.md
          sed -i "s/\${ISSUE_AUTHOR}/$ISSUE_AUTHOR/g" fallback_response.md
          sed -i "s/\${PRIORITY_BADGE}/$PRIORITY_BADGE/g" fallback_response.md

          echo "response_file=fallback_response.md" >> $GITHUB_OUTPUT
          echo "フォールバック応答作成完了"

      - name: Format GitHub Response
        id: format-response
        run: |
          echo "=== GitHub応答フォーマット ==="

          # Claude Codeの応答があるかチェック
          if [ -n "${{ steps.claude-analysis.outputs.response }}" ]; then
            echo "Claude Code応答を使用"
            echo "${{ steps.claude-analysis.outputs.response }}" > final_response.md
            echo "response_file=final_response.md" >> $GITHUB_OUTPUT
          else
            echo "フォールバック応答を使用"
            cp fallback_response.md final_response.md
            echo "response_file=final_response.md" >> $GITHUB_OUTPUT
          fi

          echo "GitHub応答フォーマット完了"

      - name: Post Response to GitHub
        run: |
          echo "=== GitHub応答投稿 ==="

          # 応答内容をJSONエスケープして投稿
          RESPONSE_BODY=$(cat final_response.md | jq -Rs .)

          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ steps.parse-issue.outputs.issue_number }}/comments" \
            -d "{\"body\": $RESPONSE_BODY}"

          echo "GitHub応答投稿完了"

      - name: Update Issue Labels
        run: |
          echo "=== Issue ラベル更新 ==="

          CATEGORY="${{ steps.categorize.outputs.category }}"
          PRIORITY="${{ steps.categorize.outputs.priority }}"

          # ラベル配列を作成
          LABELS='["auto-analyzed"'

          # カテゴリラベルを追加
          case $CATEGORY in
            "bug")
              LABELS="${LABELS},\"auto-bug-analysis\""
              ;;
            "feature")
              LABELS="${LABELS},\"auto-feature-analysis\""
              ;;
            "question")
              LABELS="${LABELS},\"auto-question-answered\""
              ;;
            "auth")
              LABELS="${LABELS},\"auto-auth-analysis\""
              ;;
            "performance")
              LABELS="${LABELS},\"auto-performance-analysis\""
              ;;
          esac

          # 優先度ラベルを追加
          case $PRIORITY in
            "critical")
              LABELS="${LABELS},\"priority-critical\""
              ;;
            "high")
              LABELS="${LABELS},\"priority-high\""
              ;;
            "medium")
              LABELS="${LABELS},\"priority-medium\""
              ;;
            "low")
              LABELS="${LABELS},\"priority-low\""
              ;;
          esac

          LABELS="${LABELS}]"

          # ラベル追加API呼び出し
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ steps.parse-issue.outputs.issue_number }}/labels" \
            -d "{\"labels\": $LABELS}" \
            || echo "ラベル追加でエラーが発生しましたが、処理を継続します"

          echo "ラベル更新完了"

      - name: Cleanup
        if: always()
        run: |
          echo "=== クリーンアップ ==="
          rm -f issue_body.txt comment_body.txt claude_prompt.txt
          rm -f fallback_response.md final_response.md
          echo "一時ファイル削除完了"
