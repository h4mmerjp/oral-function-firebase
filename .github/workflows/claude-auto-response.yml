name: Claude Code Auto Response

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  claude-auto-response:
    runs-on: ubuntu-latest
    permissions:
      issues: write      # Issueへのコメント投稿に必要
      contents: write    # Claudeがコードを修正してPushする場合に必要

    steps:
      # ステップ1: 無限ループ防止のためのイベントトリガーチェック
      - name: Check Event Trigger
        id: event-check
        run: |
          echo "=== イベントトリガーチェック ==="
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo "should_process=true" >> $GITHUB_OUTPUT
            echo "トリガー: Issue作成。処理を継続します。"
            exit 0
          fi

          if [ "${{ github.event_name }}" = "issue_comment" ]; then
            COMMENT_AUTHOR_TYPE="${{ github.event.comment.user.type }}"
            if [ "$COMMENT_AUTHOR_TYPE" = "Bot" ] || [ "$COMMENT_AUTHOR_TYPE" = "App" ]; then
              echo "should_process=false" >> $GITHUB_OUTPUT
              echo "🚫 ボットまたはAppからのコメントのため、処理をスキップします。"
              exit 0
            fi
            echo "should_process=true" >> $GITHUB_OUTPUT
            echo "✅ 人間からのコメント。処理を継続します。"
          fi

      # ステップ2: リポジトリのチェックアウト
      - name: Checkout repository
        if: steps.event-check.outputs.should_process == 'true'
        uses: actions/checkout@v4

      # ステップ3: Claudeによる分析と応答
      - name: Run Claude Analysis and Respond
        if: steps.event-check.outputs.should_process == 'true'
        uses: anthropics/claude-code-action@beta
        id: claude-analysis
        continue-on-error: true # このステップが失敗してもワークフローを続行
        with:
          # 認証キーのパラメータ名を修正
          claude_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # プロンプト内の本文参照方法を修正
          direct_prompt: |
            あなたは口腔機能低下症診断・管理アプリの上級技術サポートAIです。
            以下の問い合わせについて、技術的な観点から分析し、包括的なサポート応答を生成してください。

            ## 問い合わせ情報
            - **Issue番号**: #${{ github.event.issue.number }}
            - **報告者**: ${{ github.event.issue.user.login }}
            - **タイトル**: ${{ github.event.issue.title }}

            ### 詳細内容
            ${{ github.event.issue.body }}

            ### 追加コメント (該当する場合)
            ${{ github.event_name == 'issue_comment' && github.event.comment.body || 'なし' }}

            ## 指示
            以下の形式で応答を生成してください。
            1. **問題分析**: 技術的な原因と影響範囲
            2. **即座の対応手順**: ユーザーができること
            3. **恒久的な解決策**: コード修正案やシステム変更案
            4. **テスト手順**: 解決を確認する方法

            ⚠️重要: 応答の最後に必ず「この応答は自動生成されています。」という一文を含めてください。
          trigger_phrase: ".*"
          mode: tag
          branch_prefix: claude/
          timeout_minutes: 10

      # ステップ4: Claudeの実行結果を確認
      - name: Check Claude Analysis Result
        if: steps.event-check.outputs.should_process == 'true'
        id: check-claude-result
        run: |
          if [ "${{ steps.claude-analysis.outcome }}" = "success" ]; then
            echo "claude_succeeded=true" >> $GITHUB_OUTPUT
            echo "✅ Claudeによる分析が成功しました。"
          else
            echo "claude_succeeded=false" >> $GITHUB_OUTPUT
            echo "⚠️ Claudeによる分析が失敗しました。フォールバック応答を準備します。"
          fi

      # ステップ5: フォールバック応答の投稿 (Claudeが失敗した場合のみ実行)
      - name: Post Fallback Response
        if: steps.check-claude-result.outputs.claude_succeeded == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fallbackBody = `
            ## ⚠️ 自動分析エラー
            @${{ github.event.issue.user.login }}さん、お問い合わせありがとうございます。
            現在、AIによる自動分析システムで技術的な問題が発生したため、応答を生成できませんでした。
            担当者が内容を確認し、手動で対応いたしますので、今しばらくお待ちください。
            ご不便をおかけして申し訳ございません。
            ---
            <sub>⚠️ この応答は自動生成されています。</sub>
            `;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: fallbackBody
            });
            console.log("フォールバック応答をIssueに投稿しました。");
